import asyncio

from loguru import logger
from aiogram.utils import markdown
from aiogram import exceptions, executor

from keyboards import *
from loader import dp, bot
from Database import DataBase
from handlers.user import main_handler

db = DataBase()


async def sending_messages_2h():
    while True:
        try:
            await asyncio.sleep(7)

            text = f'ü©∑ –°–ø–µ—à—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ 6 –º–µ—Å—Ç –Ω–∞ {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä")} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ê–¥–µ–ª—å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–π –≤ –ª–∏—á–∫—É üëâ @numerolog_mentor —Å–ª–æ–≤–æ {markdown.hbold("–†–∞–∑–±–æ—Ä")} –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –ø–æ—Å–ª–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.'

            users = db.get_users_2h_autosending()
            for user in users:
                try:
                    await bot.send_message(user, text=text, parse_mode='html', reply_markup=mrkup_2h)
                    logger.info(f'ID: {user}. –ü–æ–ª—É—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É 2 –ß–∞—Å–∞')
                    db.mark_got_2h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.ChatNotFound, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1371617744, f'Happened: {ex}')


async def sending_messages_24h():
    while True:
        try:
            await asyncio.sleep(7)

            text = f'üòé 90% –ª—é–¥–µ–π –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —ç—Å–∫–ø–µ—Ä—Ç–∞–º, {markdown.hbold("—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ")} –∏ –º–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏. –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–µ—Ä—Ç –ê–¥–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é {markdown.hbold("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—É–¥—å–±—ã")} –¥–ª—è  5 –∂–µ–ª–∞—é—â–∏—Ö. –ó–∞–ø–∏—Å–∞—Ç—å –í–∞—Å?'

            users = db.get_users_24h_autosending()
            for user in users:
                try:
                    await bot.send_message(user, text=text, parse_mode='html', reply_markup=mrkup_24h)
                    logger.info(f'ID: {user}. –ü–æ–ª—É—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É 24 –ß–∞—Å–∞')
                    db.mark_got_24h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.ChatNotFound, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1371617744, f'Happened: {ex}')


async def sending_messages_48h():
    while True:
        try:
            await asyncio.sleep(7)

            text = f'{markdown.hbold("–°–µ–≥–æ–¥–Ω—è –º–æ—â–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏.")}\n\n ü§© –≠—Ç–æ —Å–∏–ª—å–Ω—ã–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∂–∏–∑–Ω–∏. –í —Ç–∞–∫–∏–µ –¥–Ω–∏ –Ω–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥ –ê–¥–µ–ª—å –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n –£—Å–ø–µ–µ—Ç –ø—Ä–∏–Ω—è—Ç—å {markdown.hbold("10 —á–µ–ª–æ–≤–µ–∫")}, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏ –Ω–∞–ø–∏—à—É—Ç –µ–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @numerolog_mentorüëà .'

            users = db.get_users_48h_autosending()
            for user in users:
                try:
                    await bot.send_message(user, text=text, parse_mode='html', reply_markup=mrkup_48h)
                    logger.info(f'ID: {user}. –ü–æ–ª—É—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É 24 –ß–∞—Å–∞')
                    db.mark_got_48h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.ChatNotFound, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1371617744, f'Happened: {ex}')


async def sending_messages_72h():
    while True:
        try:
            await asyncio.sleep(7)

            text = f'–ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, —á—Ç–æ {markdown.hbold("–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç")} –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ªü´∞üèæ, —á—Ç–æ –º–µ—à–∞–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ—é –ª—é–±–æ–≤—å‚ô•Ô∏è –∏–ª–∏ —Å–≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.üë©‚Äç‚ù§Ô∏è‚Äçüë®\n {markdown.hbold("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")} –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ @numerolog_mentor'

            users = db.get_users_72h_autosending()
            for user in users:
                try:
                    await bot.send_message(user, text=text, parse_mode='html', reply_markup=mrkup_72h)
                    logger.info(f'ID: {user}. –ü–æ–ª—É—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É 24 –ß–∞—Å–∞')
                    db.mark_got_72h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.ChatNotFound, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1371617744, f'Happened: {ex}')


async def on_startup(_):
    asyncio.create_task(sending_messages_2h())
    asyncio.create_task(sending_messages_24h())
    asyncio.create_task(sending_messages_48h())
    asyncio.create_task(sending_messages_72h())


#async def bot_start_pooling():
#    try:
#        await executor.start_polling(dp, on_startup=on_startup)
#    finally:
#        logger.info("Bot was closed")
        # await dp.storage.close()


if __name__ == "__main__":
    #asyncio.run(bot_start_pooling())
    executor.start_polling(dp, on_startup=on_startup)
